// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portal.Services.Models;

#nullable disable

namespace Portal.Services.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20250719063134_AddUniqueDivision")]
    partial class AddUniqueDivision
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Portal.Shared.Models.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "บริษัทอัคคีปราการ จำกัด (มหาชน)",
                            ShortName = "AKP"
                        });
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.CompanyBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId", "BranchCode")
                        .IsUnique();

                    b.ToTable("CompanyBranches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchCode = "00",
                            CompanyId = 1,
                            Name = "สำนักงานใหญ่"
                        });
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("DivisionId", "Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DivisionId = 1,
                            Name = "ฝ่ายขายและการตลาด"
                        },
                        new
                        {
                            Id = 2,
                            DivisionId = 1,
                            Name = "ฝ่ายขนส่ง"
                        },
                        new
                        {
                            Id = 3,
                            DivisionId = 2,
                            Name = "ฝ่ายบริหารองค์กร"
                        },
                        new
                        {
                            Id = 4,
                            DivisionId = 2,
                            Name = "ฝ่ายบัญชีและการเงิน"
                        },
                        new
                        {
                            Id = 5,
                            DivisionId = 3,
                            Name = "ฝ่ายห้องปฏิบัติการวิเคราะห์"
                        },
                        new
                        {
                            Id = 6,
                            DivisionId = 3,
                            Name = "ฝ่ายสิ่งแวดล้อมชีวอนามัย"
                        },
                        new
                        {
                            Id = 7,
                            DivisionId = 4,
                            Name = "ฝ่ายซ่อมบำรุง"
                        },
                        new
                        {
                            Id = 8,
                            DivisionId = 4,
                            Name = "ฝ่ายตรวจรับและเตรียมของเสีย"
                        },
                        new
                        {
                            Id = 9,
                            DivisionId = 4,
                            Name = "ปฏิบัติการ"
                        });
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name", "CompanyId")
                        .IsUnique();

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Name = "สายงานบริหาร"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Name = "สายงานบัญชีและการเงิน"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Name = "สายงานวิชาการ"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            Name = "สายงานปฏิบัติการ"
                        });
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeStatus");

                    b.HasIndex("ProfilePictureId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SectionId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.EmployeeCompanyAccess", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrantedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "CompanyId", "CompanyBranchId");

                    b.HasIndex("AccessLevel");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("GrantedDate");

                    b.ToTable("EmployeeCompanyAccesses");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.EmployeeDetail", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("AssignedToEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetTag")
                        .IsUnique();

                    b.HasIndex("AssignedToEmployeeId");

                    b.HasIndex("ItemId");

                    b.ToTable("IT_Assets");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsStockItem")
                        .HasColumnType("bit");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IT_Items");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_StandardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedToRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("SetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToRoleId")
                        .IsUnique();

                    b.HasIndex("ItemId");

                    b.ToTable("IT_StandardSets");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("IT_Stocks");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ประธานกรรมการบริหาร"
                        },
                        new
                        {
                            Id = 2,
                            Name = "กรรมการผู้จัดการ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "เลขานุการ"
                        },
                        new
                        {
                            Id = 4,
                            Name = "รองกรรมการผู้จัดการ"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ผู้จัดการฝ่าย"
                        },
                        new
                        {
                            Id = 6,
                            Name = "หัวหน้าแผนก"
                        },
                        new
                        {
                            Id = 7,
                            Name = "เจ้าหน้าที่ทั่วไป"
                        });
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId", "Name")
                        .IsUnique();

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Name = "การตลาดและสื่อสารองค์กร"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            Name = "สารสนเทศ"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            Name = "บริการลูกค้า"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            Name = "บริหารการขาย"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            Name = "ขนส่ง"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            Name = "ซ่อมบำรุงรถขนส่งและภาชนะ"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            Name = "กำจัดขยะอุตสาหกรรม"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 3,
                            Name = "ทรัพยากรบุคคล"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 3,
                            Name = "จัดซื้อ"
                        },
                        new
                        {
                            Id = 10,
                            DepartmentId = 3,
                            Name = "คลังพัสดุ"
                        },
                        new
                        {
                            Id = 11,
                            DepartmentId = 4,
                            Name = "บัญชีและการเงิน"
                        },
                        new
                        {
                            Id = 12,
                            DepartmentId = 4,
                            Name = "ติดตามและเร่งรัดหนี้สิน"
                        },
                        new
                        {
                            Id = 13,
                            DepartmentId = 5,
                            Name = "ห้องปฏิบัติการวิเคราะห์"
                        },
                        new
                        {
                            Id = 14,
                            DepartmentId = 6,
                            Name = "สิ่งแวดล้อม"
                        },
                        new
                        {
                            Id = 15,
                            DepartmentId = 6,
                            Name = "อาชีวอนามัยและความปลอดภัย"
                        },
                        new
                        {
                            Id = 16,
                            DepartmentId = 7,
                            Name = "ไฟฟ้า"
                        },
                        new
                        {
                            Id = 17,
                            DepartmentId = 7,
                            Name = "เครื่องกลและเครื่องยนต์"
                        },
                        new
                        {
                            Id = 18,
                            DepartmentId = 7,
                            Name = "วิศวกรรม"
                        },
                        new
                        {
                            Id = 19,
                            DepartmentId = 8,
                            Name = "ตรวจรับและจัดเก็บของเสีย"
                        },
                        new
                        {
                            Id = 20,
                            DepartmentId = 8,
                            Name = "เตรียมของเสีย"
                        },
                        new
                        {
                            Id = 21,
                            DepartmentId = 9,
                            Name = "เผากาก"
                        });
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Support.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssignedToEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedTicketId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestedItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssignedToEmployeeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RelatedTicketId");

                    b.HasIndex("ReportedByEmployeeId");

                    b.HasIndex("RequestedItemId");

                    b.HasIndex("TicketNumber")
                        .IsUnique();

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Support.SupportTicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SupportTicketCategories");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Support.SupportTicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FileAttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FileAttachmentId");

                    b.HasIndex("TicketId");

                    b.ToTable("SupportTicketHistories");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SupportTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UploadedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileName");

                    b.HasIndex("SupportTicketId");

                    b.HasIndex("UploadDateTime");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.AuditLog", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Employee", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.CompanyBranch", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Department", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Division", "Division")
                        .WithMany("Departments")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Division", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Company", "Company")
                        .WithMany("Divisions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Employee", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Portal.Shared.Models.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Portal.Shared.Models.Entities.UploadedFile", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Portal.Shared.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("ProfilePicture");

                    b.Navigation("Role");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.EmployeeCompanyAccess", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.CompanyBranch", "CompanyBranch")
                        .WithMany("EmployeeAccesses")
                        .HasForeignKey("CompanyBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.Company", "Company")
                        .WithMany("EmployeeAccesses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeCompanyAccesses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyBranch");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.EmployeeDetail", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Employee", "Employee")
                        .WithOne("EmployeeDetail")
                        .HasForeignKey("Portal.Shared.Models.Entities.EmployeeDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_Asset", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Employee", "AssignedToEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedToEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Portal.Shared.Models.Entities.IT_Inventory.IT_Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToEmployee");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_StandardSet", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Role", "AssignedToRole")
                        .WithMany()
                        .HasForeignKey("AssignedToRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.IT_Inventory.IT_Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToRole");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.IT_Inventory.IT_Stock", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.IT_Inventory.IT_Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Section", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Support.SupportTicket", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.IT_Inventory.IT_Asset", "RelatedAsset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Portal.Shared.Models.Entities.Employee", "AssignedToEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedToEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Portal.Shared.Models.Entities.Support.SupportTicketCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.Support.SupportTicket", "RelatedTicket")
                        .WithMany()
                        .HasForeignKey("RelatedTicketId");

                    b.HasOne("Portal.Shared.Models.Entities.Employee", "ReportedByEmployee")
                        .WithMany()
                        .HasForeignKey("ReportedByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.IT_Inventory.IT_Item", "RequestedItem")
                        .WithMany()
                        .HasForeignKey("RequestedItemId");

                    b.Navigation("AssignedToEmployee");

                    b.Navigation("Category");

                    b.Navigation("RelatedAsset");

                    b.Navigation("RelatedTicket");

                    b.Navigation("ReportedByEmployee");

                    b.Navigation("RequestedItem");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Support.SupportTicketHistory", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Portal.Shared.Models.Entities.UploadedFile", "FileAttachment")
                        .WithMany()
                        .HasForeignKey("FileAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Portal.Shared.Models.Entities.Support.SupportTicket", "Ticket")
                        .WithMany("History")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("FileAttachment");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.UploadedFile", b =>
                {
                    b.HasOne("Portal.Shared.Models.Entities.Support.SupportTicket", "SupportTicket")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("SupportTicketId");

                    b.HasOne("Portal.Shared.Models.Entities.Employee", "UploadedByUser")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupportTicket");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Divisions");

                    b.Navigation("EmployeeAccesses");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.CompanyBranch", b =>
                {
                    b.Navigation("EmployeeAccesses");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Department", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Division", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Employee", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("EmployeeCompanyAccesses");

                    b.Navigation("EmployeeDetail");

                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("Portal.Shared.Models.Entities.Support.SupportTicket", b =>
                {
                    b.Navigation("History");

                    b.Navigation("UploadedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
